// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id       String     @id @default(cuid()) @db.VarChar(50)
  name     String     @unique @db.VarChar(100)
  address  String?    @db.Text
  Employee Employee[]
  Place    Place[]

  @@map("companies")
}

model Employee {
  id        String   @id @default(cuid()) @db.VarChar(50)
  name      String   @db.VarChar(100)
  email     String   @unique @db.VarChar(100)
  role      Role     @default(USER)
  password  String   @db.VarChar(255)
  companyId String?  @db.VarChar(50)
  company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("employees")
}

model Place {
  id        String  @id @default(cuid()) @db.VarChar(50)
  name      String  @db.VarChar(255)
  address   String? @db.Text
  latitude  Float?
  longitude Float?
  companyId String  @db.VarChar(50)
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Well      Well[]

  @@map("places")
}

model Well {
  id        String  @id @default(cuid()) @db.VarChar(50)
  name      String  @db.VarChar(100)
  address   String? @db.Text
  latitude  Float?
  longitude Float?
  placeId   String  @db.VarChar(50)
  place     Place   @relation(fields: [placeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  Record Record[]
  Notification Notification[]

  @@map("wells")
}

model Record {
  id String @id @default(cuid()) @db.VarChar(50)

  date        DateTime @default(now()) @map("Date-Time")
  bitdepth    Float?   @map("BitDepth(m)")
  scfm        Float?   @map("Scfm")
  mudcondin   Float?   @map("MudCondIn(mmho)")
  mudcondout  Float?   @map("MudCondOut(mmho)")
  blockpos    Float?   @map("BlockPos(m)")
  wob         Float?   @map("WOB(klb)")
  ropin       Float?   @map("ROPi(m/hr)")
  bvdepth     Float?   @map("BVDepth(m)")
  torque      Float?   @map("Torque(klb.ft)")
  rpm         Float?   @map("RPM")
  hkldp       Float?   @map("HKLDP(klb)")
  logdepth    Float?   @map("LogDepth(m)")
  h2s_1       Float?   @map("H2S1_(ppm)")
  mudflowoutp Float?   @map("MudFlowOutp")
  totspm      Float?   @map("TotSPM")
  sppress     Float?   @map("SPPress(psi)")
  mudflowin   Float?   @map("MudFlowIn(gpm)")
  co2_1       Float?   @map("CO2_1(%)")
  gas         Float?   @map("Gas(%)")
  mudtempin   Float?   @map("MudTempIn(C)")
  mudtempout  Float?   @map("MudTempOut(C)")
  tankvoltot  Float?   @map("TankVolTot(bbl)")

  wellId String @db.VarChar(50)
  well   Well   @relation(fields: [wellId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("records")
}

model Notification {
  id        String   @id @default(cuid()) @db.VarChar(50)
  title     String   @db.VarChar(255)
  message   String?  @db.Text
  seen      Boolean  @default(false)
  wellId    String   @db.VarChar(50)
  well      Well     @relation(fields: [wellId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now()) @map("Created-At")

  @@map("notifications")
}

enum Role {
  USER
  ADMIN
}
